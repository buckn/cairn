#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input ../shaders.glsl --output ../shaders.glsl.h --slang metal_macos

    Overview:

        Shader program 'quad':
            Get shader desc: quad_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
                Uniform block 'vertex_uniforms':
                    C struct: vertex_uniforms_t
                    Bind slot: SLOT_vertex_uniforms = 0
            Fragment shader: fs
                Uniform block 'fragment_uniforms':
                    C struct: fragment_uniforms_t
                    Bind slot: SLOT_fragment_uniforms = 0


    Shader descriptor structs:

        sg_shader quad = sg_make_shader(quad_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'vertex_uniforms':

        vertex_uniforms_t vertex_uniforms = {
            .model_matrix = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vertex_uniforms, &SG_RANGE(vertex_uniforms));

    Bind slot and C-struct for uniform block 'fragment_uniforms':

        fragment_uniforms_t fragment_uniforms = {
            .color = ...;
            .scale = ...;
            .radius = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fragment_uniforms, &SG_RANGE(fragment_uniforms));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_position (0)
#define SLOT_vertex_uniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vertex_uniforms_t {
    Mat4 model_matrix;
} vertex_uniforms_t;
#pragma pack(pop)
#define SLOT_fragment_uniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fragment_uniforms_t {
    Vec4 color;
    Vec2 scale;
    float radius;
    uint8_t _pad_28[4];
} fragment_uniforms_t;
#pragma pack(pop)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vertex_uniforms
    {
        float4x4 model_matrix;
    };
    
    struct main0_out
    {
        float2 square_pos [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float4 position [[attribute(0)]];
    };
    
    #line 15 "../shaders.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vertex_uniforms& _21 [[buffer(0)]])
    {
        main0_out out = {};
    #line 15 "../shaders.glsl"
        out.gl_Position = _21.model_matrix * in.position;
        out.square_pos = in.position.xy;
        return out;
    }
    
*/
static const char vs_source_metal_macos[572] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x6f,
    0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,0x72,0x69,0x78,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x73,0x71,
    0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,
    0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x2e,0x2e,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x2e,0x2e,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x5f,0x32,0x31,0x2e,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x6d,0x61,0x74,
    0x72,0x69,0x78,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x73,0x71,0x75,0x61,0x72,
    0x65,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct fragment_uniforms
    {
        float4 color;
        float2 scale;
        float radius;
    };
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 square_pos [[user(locn0)]];
    };
    
    #line 16 "../shaders.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], constant fragment_uniforms& _15 [[buffer(0)]])
    {
        main0_out out = {};
    #line 16 "../shaders.glsl"
        out.frag_color = _15.color;
    #line 19 "../shaders.glsl"
        float _36 = (_15.scale.x + _15.scale.y) * 0.004999999888241291046142578125;
    #line 21 "../shaders.glsl"
        float _53 = 0.5 - _15.radius;
    #line 22 "../shaders.glsl"
        float alpha = 1.0;
        float _60 = abs(in.square_pos.x);
        bool _64 = _60 > _53;
        bool _74;
        if (_64)
        {
            _74 = abs(in.square_pos.y) > _53;
        }
        else
        {
            _74 = _64;
        }
        if (_74)
        {
            alpha = smoothstep(_15.radius, _15.radius - _36, length(in.square_pos - (float2(sign(in.square_pos.x), sign(in.square_pos.y)) * _53)));
        }
    #line 25 "../shaders.glsl"
        float _88 = alpha;
        float _90 = 0.5 - _36;
        float _103 = fast::min(fast::min(_88, smoothstep(0.5, _90, _60)), smoothstep(0.5, _90, abs(in.square_pos.y)));
        alpha = _103;
        out.frag_color.w = _103;
        return out;
    }
    
*/
static const char fs_source_metal_macos[1318] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,
    0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x73,0x63,0x61,0x6c,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x2e,
    0x2e,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,
    0x6d,0x65,0x6e,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x26,0x20,0x5f,
    0x31,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,
    0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x36,0x20,0x22,0x2e,0x2e,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,0x35,0x2e,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,
    0x22,0x2e,0x2e,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x36,0x20,
    0x3d,0x20,0x28,0x5f,0x31,0x35,0x2e,0x73,0x63,0x61,0x6c,0x65,0x2e,0x78,0x20,0x2b,
    0x20,0x5f,0x31,0x35,0x2e,0x73,0x63,0x61,0x6c,0x65,0x2e,0x79,0x29,0x20,0x2a,0x20,
    0x30,0x2e,0x30,0x30,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x32,0x34,
    0x31,0x32,0x39,0x31,0x30,0x34,0x36,0x31,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,0x2e,0x2e,0x2f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x30,0x2e,0x35,
    0x20,0x2d,0x20,0x5f,0x31,0x35,0x2e,0x72,0x61,0x64,0x69,0x75,0x73,0x3b,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x2e,0x2e,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x36,0x30,0x20,0x3d,
    0x20,0x61,0x62,0x73,0x28,0x69,0x6e,0x2e,0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,
    0x6f,0x73,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x36,0x34,0x20,0x3d,0x20,0x5f,0x36,0x30,0x20,0x3e,0x20,0x5f,0x35,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x37,0x34,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x36,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,
    0x61,0x62,0x73,0x28,0x69,0x6e,0x2e,0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,
    0x73,0x2e,0x79,0x29,0x20,0x3e,0x20,0x5f,0x35,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x5f,
    0x36,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x37,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x73,0x6d,0x6f,
    0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x5f,0x31,0x35,0x2e,0x72,0x61,0x64,0x69,
    0x75,0x73,0x2c,0x20,0x5f,0x31,0x35,0x2e,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2d,
    0x20,0x5f,0x33,0x36,0x2c,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x69,0x6e,0x2e,
    0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x20,0x2d,0x20,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x73,0x69,0x67,0x6e,0x28,0x69,0x6e,0x2e,0x73,0x71,0x75,
    0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x2e,0x78,0x29,0x2c,0x20,0x73,0x69,0x67,0x6e,
    0x28,0x69,0x6e,0x2e,0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x2e,0x79,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x35,0x33,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x2e,0x2e,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x38,0x20,0x3d,0x20,0x61,0x6c,
    0x70,0x68,0x61,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x39,0x30,0x20,0x3d,0x20,0x30,0x2e,0x35,0x20,0x2d,0x20,0x5f,0x33,0x36,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x33,0x20,0x3d,
    0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x5f,0x38,0x38,0x2c,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,
    0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x35,0x2c,0x20,0x5f,0x39,0x30,0x2c,0x20,0x5f,
    0x36,0x30,0x29,0x29,0x2c,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,
    0x28,0x30,0x2e,0x35,0x2c,0x20,0x5f,0x39,0x30,0x2c,0x20,0x61,0x62,0x73,0x28,0x69,
    0x6e,0x2e,0x73,0x71,0x75,0x61,0x72,0x65,0x5f,0x70,0x6f,0x73,0x2e,0x79,0x29,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x5f,
    0x31,0x30,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x20,0x5f,0x31,0x30,0x33,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.glsl.h"
#endif
static inline const sg_shader_desc* quad_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.label = "quad_shader";
    };
    return &desc;
  }
  return 0;
}
